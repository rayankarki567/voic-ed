// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  ADMIN
  MODERATOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?
  name          String?
  studentId     String?   @unique
  department    String?
  year          String?
  role          UserRole  @default(STUDENT)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Security and authentication related fields
  twoFactorEnabled      Boolean  @default(false)
  twoFactorSecret      String?
  failedLoginAttempts  Int      @default(0)
  lastFailedLogin      DateTime?
  lockedUntil         DateTime?
  
  // Privacy settings
  profileVisibility String   @default("public") // public, students, private
  
  // Relationships
  petitions     Petition[]
  comments      Comment[]
  votes         Vote[]
  surveys       SurveyResponse[]
  complaints    Complaint[]
  forumPosts    ForumPost[]
  forumReplies  ForumReply[]
  
  @@map("users")
}

model Petition {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  category    String
  goal        Int
  duration    Int
  status      String      @default("active")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  signatures  Signature[]
  comments    Comment[]

  @@map("petitions")
}

model Signature {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  
  // Relationships
  petition   Petition @relation(fields: [petitionId], references: [id])
  petitionId String
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("signatures")
  @@unique([petitionId, userId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relationships
  petition   Petition @relation(fields: [petitionId], references: [id])
  petitionId String
  author     User     @relation(fields: [authorId], references: [id])
  authorId   String

  @@map("comments")
}

model Survey {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  questions   Json     // Array of questions with their type and options
  status      String   @default("active")
  createdAt   DateTime @default(now())
  endDate     DateTime

  // Relationships
  responses   SurveyResponse[]

  @@map("surveys")
}

model SurveyResponse {
  id        String   @id @default(cuid())
  answers   Json     // Array of answers corresponding to questions
  createdAt DateTime @default(now())
  
  // Relationships
  survey    Survey   @relation(fields: [surveyId], references: [id])
  surveyId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("survey_responses")
  @@unique([surveyId, userId])
}

model Poll {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  options     Json      // Array of options
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  endDate     DateTime
  
  // Relationships
  votes      Vote[]

  @@map("polls")
}

model Vote {
  id        String   @id @default(cuid())
  option    Int      // Index of the selected option
  createdAt DateTime @default(now())
  
  // Relationships
  poll      Poll     @relation(fields: [pollId], references: [id])
  pollId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map("votes")
  @@unique([pollId, userId])
}

model Complaint {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  location    String?
  department  String
  priority    String
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@map("complaints")
}

model ForumTopic {
  id          String      @id @default(cuid())
  title       String
  category    String
  status      String      @default("active")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  posts       ForumPost[]

  @@map("forum_topics")
}

model ForumPost {
  id         String       @id @default(cuid())
  content    String      @db.Text
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  
  // Relationships
  topic      ForumTopic   @relation(fields: [topicId], references: [id])
  topicId    String
  author     User         @relation(fields: [authorId], references: [id])
  authorId   String
  replies    ForumReply[]

  @@map("forum_posts")
}

model ForumReply {
  id         String    @id @default(cuid())
  content    String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  parentId   String?   // For nested replies
  
  // Relationships
  post       ForumPost @relation(fields: [postId], references: [id])
  postId     String
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  parent     ForumReply?  @relation("NestedReplies", fields: [parentId], references: [id])
  replies    ForumReply[] @relation("NestedReplies")

  @@map("forum_replies")
}
